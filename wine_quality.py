# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gmgYK7eI9T6uN3P0CCPIsQe9Ot5MCieS
"""

from google.colab import files

# Upload a single file
uploaded = files.upload()

# To upload multiple files, you can use a loop or specify multiple file names
# uploaded = files.upload(['file1.csv', 'file2.csv'])

import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

# Load the wine quality dataset (replace 'wine_quality.csv' with your dataset)
data = pd.read_csv('winequality-red.csv')

# Extract features (X) and labels (y)
X = data.drop('quality', axis=1).values
y = data['quality'].values


# Split the data into training, validation, and test sets
X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.2, random_state=42)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)


# Standardize the input features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_val_scaled = scaler.transform(X_val)
X_test_scaled = scaler.transform(X_test)

# Define the regression model using TensorFlow
model = tf.keras.Sequential([
    tf.keras.layers.Input(shape=(X_train.shape[1],), name='input_layer'),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(1, activation='linear', name='output_layer')
])


optimizer = tf.keras.optimizers.Adam(learning_rate=0.001)

# Compile the model
#model.compile(optimizer='adam', loss='mean_squared_error')

model.compile(optimizer = tf.keras.optimizers.Adam(learning_rate=0.001) , loss='mean_squared_error')

# Train the model
history = model.fit(X_train, y_train, epochs=200, batch_size=32, validation_split=0.2)

# Evaluate the model on the test set
loss = model.evaluate(X_test, y_test)
print(f'Test Loss: {loss}')

# Make predictions on the test set
y_pred = model.predict(X_test)

# Plot the actual vs. predicted values
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.title('Actual vs. Predicted Wine Quality')
plt.xlabel('Actual Wine Quality')
plt.ylabel('Predicted Wine Quality')
plt.show()

# Plot training loss and validation loss over epochs
plt.figure(figsize=(10, 6))
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

|